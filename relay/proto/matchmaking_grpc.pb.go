// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: matchmaking.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchmakingServiceClient is the client API for MatchmakingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchmakingServiceClient interface {
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*MatchmakingTicket, error)
	DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*MatchmakingTicket, error)
	AddUsersToMatch(ctx context.Context, in *AddUsersToMatchRequest, opts ...grpc.CallOption) (*MatchmakingTicket, error)
}

type matchmakingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakingServiceClient(cc grpc.ClientConnInterface) MatchmakingServiceClient {
	return &matchmakingServiceClient{cc}
}

func (c *matchmakingServiceClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*MatchmakingTicket, error) {
	out := new(MatchmakingTicket)
	err := c.cc.Invoke(ctx, "/gamecloud.MatchmakingService/CreateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gamecloud.MatchmakingService/DeleteTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*MatchmakingTicket, error) {
	out := new(MatchmakingTicket)
	err := c.cc.Invoke(ctx, "/gamecloud.MatchmakingService/GetTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) AddUsersToMatch(ctx context.Context, in *AddUsersToMatchRequest, opts ...grpc.CallOption) (*MatchmakingTicket, error) {
	out := new(MatchmakingTicket)
	err := c.cc.Invoke(ctx, "/gamecloud.MatchmakingService/AddUsersToMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchmakingServiceServer is the server API for MatchmakingService service.
// All implementations must embed UnimplementedMatchmakingServiceServer
// for forward compatibility
type MatchmakingServiceServer interface {
	CreateTicket(context.Context, *CreateTicketRequest) (*MatchmakingTicket, error)
	DeleteTicket(context.Context, *DeleteTicketRequest) (*emptypb.Empty, error)
	GetTicket(context.Context, *GetTicketRequest) (*MatchmakingTicket, error)
	AddUsersToMatch(context.Context, *AddUsersToMatchRequest) (*MatchmakingTicket, error)
	mustEmbedUnimplementedMatchmakingServiceServer()
}

// UnimplementedMatchmakingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMatchmakingServiceServer struct {
}

func (UnimplementedMatchmakingServiceServer) CreateTicket(context.Context, *CreateTicketRequest) (*MatchmakingTicket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedMatchmakingServiceServer) DeleteTicket(context.Context, *DeleteTicketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (UnimplementedMatchmakingServiceServer) GetTicket(context.Context, *GetTicketRequest) (*MatchmakingTicket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicket not implemented")
}
func (UnimplementedMatchmakingServiceServer) AddUsersToMatch(context.Context, *AddUsersToMatchRequest) (*MatchmakingTicket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsersToMatch not implemented")
}
func (UnimplementedMatchmakingServiceServer) mustEmbedUnimplementedMatchmakingServiceServer() {}

// UnsafeMatchmakingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakingServiceServer will
// result in compilation errors.
type UnsafeMatchmakingServiceServer interface {
	mustEmbedUnimplementedMatchmakingServiceServer()
}

func RegisterMatchmakingServiceServer(s grpc.ServiceRegistrar, srv MatchmakingServiceServer) {
	s.RegisterService(&MatchmakingService_ServiceDesc, srv)
}

func _MatchmakingService_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecloud.MatchmakingService/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecloud.MatchmakingService/DeleteTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).DeleteTicket(ctx, req.(*DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_GetTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).GetTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecloud.MatchmakingService/GetTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).GetTicket(ctx, req.(*GetTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_AddUsersToMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUsersToMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).AddUsersToMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecloud.MatchmakingService/AddUsersToMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).AddUsersToMatch(ctx, req.(*AddUsersToMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchmakingService_ServiceDesc is the grpc.ServiceDesc for MatchmakingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchmakingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamecloud.MatchmakingService",
	HandlerType: (*MatchmakingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _MatchmakingService_CreateTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _MatchmakingService_DeleteTicket_Handler,
		},
		{
			MethodName: "GetTicket",
			Handler:    _MatchmakingService_GetTicket_Handler,
		},
		{
			MethodName: "AddUsersToMatch",
			Handler:    _MatchmakingService_AddUsersToMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matchmaking.proto",
}
