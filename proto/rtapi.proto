syntax = "proto3";

package gamecloud;

option go_package = "github.com/turanheydarli/gamecloud/relay/proto";
option csharp_namespace = "GameCloud.Proto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "gamecloud.proto";

// Envelope for WebSocket messages between client and relay server
message Envelope {
  // Unique ID for this message
  string id = 1;
  
  // Message type and payload
  oneof message {
    Error error = 2;
    UpdatePlayer update_player = 25; //

    // Session messages
    SessionConnect connect = 3;
    SessionDisconnect disconnect = 4;
    SessionHeartbeat heartbeat = 5;
    
    RPC rpc = 70;
    RPCResult rpc_result = 71;
    RPCEvent rpc_event = 72;
    
    ObjectInstantiate object_instantiate = 80;
    ObjectSync object_sync = 81;
    ObjectSyncAck object_sync_ack = 82;
    ObjectDestroy object_destroy = 83;
    
    RoomCreate room_create = 90;
    RoomJoin room_join = 91;
    RoomLeave room_leave = 92;
    RoomMessage room_message = 93;
    
    MatchmakerAdd matchmaker_add = 20;
    MatchmakerRemove matchmaker_remove = 21;
    MatchmakerMatched matchmaker_matched = 22;
    
    // Status
    Status status = 30;
    StatusUpdate status_update = 31;
    StatusPresence status_presence = 32;
    
    // Game-specific messages
    GameState game_state = 40;
    GameAction game_action = 41; // This now refers to the message type in gamecloud.proto
    GameActionAck game_action_ack = 42; // This now refers to the message type in gamecloud.proto
    TurnChange turn_change = 43;
    GameEnd game_end = 44;

    UpdatePlayerAttributes update_player_attributes = 50;
    GetPlayerAttributes get_player_attributes = 51;
    DeletePlayerAttribute delete_player_attribute = 52;

    PlayerJoined player_joined = 100;
    PlayerLeft player_left = 101;
    RoomMessageEvent room_message_event = 102;
  }
}


// RPC Messages
message RPC {
  string id = 1;
  string method = 2;
  bytes params = 3;
  int32 target = 4;  // RPCTarget enum value
  bytes target_players = 5;  // JSON array of player IDs for RPCTargetSpecific
  int32 view_id = 6;  // For PhotonView-like targeting
}

message RPCResult {
  string id = 1;
  bytes result = 2;
}

message RPCEvent {
  string id = 1;
  string sender_id = 2;
  string method = 3;
  bytes params = 4;
  int32 view_id = 5;  // For PhotonView-like targeting
}

// Object Sync Messages (PhotonView-like)
message ObjectInstantiate {
  int32 view_id = 1;
  string owner_id = 2;
  string prefab_name = 3;
  Vector3 position = 4;
  Quaternion rotation = 5;
  Vector3 scale = 6;
  map<string, bytes> properties = 7;
}

message ObjectSync {
  int32 view_id = 1;
  Vector3 position = 2;
  Quaternion rotation = 3;
  Vector3 scale = 4;
  map<string, bytes> properties = 5;
}

message ObjectSyncAck {
  int32 view_id = 1;
  bool success = 2;
}

message ObjectDestroy {
  int32 view_id = 1;
  bool success = 2;
}

message RoomCreate {
  string room_id = 1;
  string name = 2;
  string game_type = 3;
  int32 max_players = 4;
  bool is_private = 5;
  string password = 6;
  map<string, string> metadata = 7;
}

message RoomJoin {
  string room_id = 1;
  string password = 2;
  bool success = 3;
  repeated RoomPlayer players = 4;
  map<string, string> metadata = 5;
}

message RoomPlayer {
  string player_id = 1;
  bool is_ready = 2;
  map<string, string> metadata = 3;
}

message RoomLeave {
  string room_id = 1;
  bool success = 2;
}

message RoomMessage {
  string room_id = 1;
  bytes data = 2;
  bool success = 3;
}

message Vector3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

message Quaternion {
  float x = 1;
  float y = 2;
  float z = 3;
  float w = 4;
}

message UpdatePlayerAttributes {
  string player_id = 1;
  string collection = 2;
  string key = 3;
  string value = 4;
}

message GetPlayerAttributes {
  string player_id = 1;
  string collection = 2;
  string key = 3;
  string value = 4;
  map<string, string> attributes = 5;
}

message DeletePlayerAttribute {
  string player_id = 1;
  string collection = 2;
  string key = 3;
  bool success = 4;
}

message UpdatePlayer {
  string player_id = 1;
  string display_name = 2;
  string avatar_url = 3;
  map<string, string> metadata = 4;
}

message Error {
  string code = 1;
  string message = 2;
  map<string, string> context = 3;
}

message SessionDisconnect {
  string reason = 1;
}

message SessionHeartbeat {
  google.protobuf.Timestamp timestamp = 1;
}


message RoomData {
  string room_id = 1;
  string sender_id = 2;
  bytes data = 3;
  bool reliable = 4;
  google.protobuf.Int32Value sequence = 5;
}

message RoomPresence {
  string room_id = 1;
  repeated UserPresenceInfo joins = 2;
  repeated UserPresenceInfo leaves = 3;
}

message UserPresenceInfo {
  string user_id = 1;
  string username = 2;
  map<string, string> metadata = 3;
  string status = 4;
}

// Matchmaking messages
message MatchmakerAdd {
  string game_id = 1;
  int32 min_count = 2;
  int32 max_count = 3;
  string query = 4;
  map<string, double> numeric_properties = 5;
  map<string, string> string_properties = 6;
}

message MatchmakerRemove {
  string ticket = 1;
}

message MatchmakerMatched {
  string ticket = 1;
  string room_id = 2;
  repeated string user_ids = 3;
  bool self_matched = 4;
}

// Status messages
message Status {
  map<string, string> presence_statuses = 1;
}

message StatusUpdate {
  string status = 1;
  map<string, string> metadata = 2;
}

message StatusPresence {
  repeated UserPresenceInfo presences = 1;
}

// Game-specific messages
message GameState {
  string room_id = 1;
  bytes state_data = 2;
  string current_turn_user_id = 3;
  int32 turn_number = 4;
}

// REMOVED: Duplicate GameActionAck message definition

message TurnChange {
  string room_id = 1;
  string next_player_id = 2;
  int32 turn_number = 3;
  int32 turn_timeout_seconds = 4;
}

message GameEnd {
  string room_id = 1;
  string winner_id = 2;
  map<string, int32> scores = 3;
  map<string, string> result_metadata = 4;
}

message PlayerJoined {
  string room_id = 1;
  string player_id = 2;
  map<string, string> metadata = 3;
}

message PlayerLeft {
  string room_id = 1;
  string player_id = 2;
  string reason = 3;
}

message RoomMessageEvent {
  string room_id = 1;
  string sender_id = 2;
  bytes data = 3;
  google.protobuf.Timestamp timestamp = 4;
}